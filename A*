import heapq

def a_star_search(graph, start, goal, heuristic):
    open_set = []
    heapq.heappush(open_set, (heuristic[start], 0, start))  # (f, g, node)

    came_from = {}
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0

    visited = set()

    while open_set:
        _, current_g, current = heapq.heappop(open_set)
        print(f"Visiting: {current}")
        visited.add(current)

        if current == goal:
            print(f"Found target: {goal}")
            return True

        for neighbor in graph[current]:
            tentative_g = current_g + 1  # all edges = 1
            if tentative_g < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g
                f_score = tentative_g + heuristic[neighbor]
                heapq.heappush(open_set, (f_score, tentative_g, neighbor))

    return False

# Define the graph
graph = {
    0: [1, 2],
    1: [0, 3, 4],
    2: [0, 5, 6],
    3: [1],
    4: [1],
    5: [2],
    6: [2]
}

# Define the heuristic
heuristic = {
    0: 2,
    1: 3,
    2: 1,
    3: 4,
    4: 3,
    5: 0,
    6: 2
}

# Run A* to find node 5
a_star_search(graph, 0, 5, heuristic)
